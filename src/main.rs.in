extern crate serde;
extern crate serde_json;
extern crate getopts;
extern crate openssl;
extern crate postgres;

use getopts::Options;
use std::env;
use std::fs::File;

mod auth;
mod script;
mod importer;

#[derive(Serialize, Deserialize, Debug)]
pub struct Config {
    psql_url: String,
    sqldir: String,
    oauth_id: String,
    oauth_secret: String,
    script_id: String,
    func_name: String,
    tokenfile: String,
    spreadsheet_url: String,
    exec_latest: bool,
}

const DEFAULT_SETTINGS: &'static str = "settings.json";

fn main() {
    //get args
    let args: Vec<String> = env::args().collect();

    //parse options
    let mut opts = Options::new();
    opts.optopt("c", "", "JSON file path which contains configuration", "JSONFILE");    
    let matches = opts.parse(&args[1..]).unwrap();
    let path = matches.opt_str("c").unwrap_or_else(|| DEFAULT_SETTINGS.to_string());

    //get config object
    let f = File::open(path.as_str()).unwrap();
    let config: Config = serde_json::from_reader(f).unwrap();

    importer::Importer::new(config).unwrap().run().unwrap();
}
